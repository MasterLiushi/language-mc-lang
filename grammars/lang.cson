# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.lang' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'lang' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'lang'
]
patterns: [
  {
    begin: '^([ \\t]+)?(?=#|//)'
    beginCaptures:
      1:
        name: 'punctuation.whitespace.comment.leading.mc-lang'
    end: '(?!\\G)'
    patterns: [
      {
        begin: '#|//'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.mc-lang'
        end: '\\n'
        name: 'comment.line.number-sign.mc-lang'
      }
    ]
  }
  {
    begin: '^([ #a-zA-Z0-9_:.\\\\-]+)\\s*(=)'
    end: '\\n'
    beginCaptures:
      1:
        name: 'support.constant.mc-lang'
        patterns: [
          {
            match: '\\\\([tnfr"\'\\\\]|u\\h{4})'
            name: 'constant.character.escape.mc-lang'
          }
        ]
      2:
        name: 'punctuation.separator.key-value.mc-lang'
    name: 'meta.key-pair.mc-lang'
    patterns: [
      {
        begin: '(?=\\S)'
        end: '(?=\\n)'
        name: 'string.unquoted.mc-lang'
        patterns: [
          {
            match: '''(?x)
              \\\\                # a literal backslash
              (                   # followed by
                ["\\\\/bfnrt]     # one of these characters
                |                 # or
                u[0-9a-fA-F]{4}   # a u and four hex digits
              )
            '''
            name: 'constant.character.escape.mc-lang'
          }
          {
            match: 'ยง[0-9a-fk-or]'
            name: 'constant.other.symbol.mc-lang'
          }
          {
            match: '<[a-zA-Z0-9-]+>'
            name: 'constant.other.symbol.mc-lang'
          }
          {
            match: '%(\\d\\$)?([.+\\-0,(])*\\d?[aAbBcCeEgGxXhHsStTodfu]'
            name: 'variable.mc-lang'
          }
          {
            match: '(?<!%)%(?!(\\d\\$)?([.+\\-0,(])*\\d?[aAbBcCeEgGxXhHsStTodfu]|%)'
            name: 'invalid.illegal.mc-lang'
          }
        ]
      }
    ]
  }
]
